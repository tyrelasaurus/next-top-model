#!/bin/bash

# Next Top Model - Elite Sports Analytics
# Native Mac Application Launcher

echo "üèÜ Starting Next Top Model - Elite Sports Analytics..."

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
APP_DIR="$( cd "$SCRIPT_DIR/../../.." &> /dev/null && pwd )"

echo "üìÅ App directory: $APP_DIR"

# Change to the app directory
cd "$APP_DIR"

# Check if virtual environment exists
if [ ! -d "desktop_app_env" ]; then
    echo "üîß Setting up Python environment..."
    python3 -m venv desktop_app_env
    source desktop_app_env/bin/activate
    pip install flask pywebview
else
    echo "‚úÖ Python environment found"
    source desktop_app_env/bin/activate
fi

# Check if database exists
if [ ! -f "sports_data.db" ]; then
    echo "üìä First run - will create database from your NFL data..."
fi

echo "üöÄ Launching Elite Sports Analytics Platform..."

# Run the desktop app
python3 - << 'EOF'
#!/usr/bin/env python3
import os
import sys
import json
import sqlite3
import threading
import time
from datetime import datetime

# Add current directory to path
sys.path.append(os.getcwd())

try:
    from flask import Flask, jsonify, render_template_string
    import webview
    print("‚úÖ All dependencies loaded successfully")
except ImportError as e:
    print(f"‚ùå Missing dependency: {e}")
    print("üîß Installing required packages...")
    os.system("pip install flask pywebview")
    from flask import Flask, jsonify, render_template_string
    import webview

# Initialize Flask app
app = Flask(__name__)

# HTML Template for the Elite Sports Analytics Interface
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Next Top Model - Elite Sports Analytics</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Inter', sans-serif;
            background: linear-gradient(135deg, #0F0F17 0%, #1A1A2E 50%, #16213E 100%);
            color: #E5E7EB;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        
        .header {
            text-align: center;
            padding: 40px 0;
            background: linear-gradient(135deg, rgba(168, 85, 247, 0.1), rgba(236, 72, 153, 0.1));
            border-radius: 20px;
            margin-bottom: 30px;
            border: 1px solid rgba(168, 85, 247, 0.2);
        }
        
        .title {
            font-size: 4rem;
            font-weight: 900;
            background: linear-gradient(45deg, #ffffff, #A855F7, #EC4899);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
            text-shadow: 0 0 30px rgba(168, 85, 247, 0.3);
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: #9CA3AF;
            font-weight: 500;
        }
        
        .nav-tabs {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 40px;
            flex-wrap: wrap;
        }
        
        .tab-button {
            background: linear-gradient(135deg, rgba(31, 41, 55, 0.8), rgba(88, 28, 135, 0.3));
            border: 1px solid rgba(168, 85, 247, 0.3);
            color: #E5E7EB;
            padding: 15px 30px;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            font-size: 16px;
        }
        
        .tab-button:hover {
            background: linear-gradient(135deg, rgba(168, 85, 247, 0.2), rgba(236, 72, 153, 0.2));
            border-color: rgba(168, 85, 247, 0.5);
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(168, 85, 247, 0.2);
        }
        
        .tab-button.active {
            background: linear-gradient(135deg, #A855F7, #EC4899);
            border-color: #A855F7;
            color: white;
            box-shadow: 0 10px 25px rgba(168, 85, 247, 0.3);
        }
        
        .content-area { display: none; }
        .content-area.active { display: block; }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }
        
        .metric-card {
            background: linear-gradient(135deg, rgba(31, 41, 55, 0.8), rgba(88, 28, 135, 0.3));
            border: 1px solid rgba(168, 85, 247, 0.3);
            border-radius: 16px;
            padding: 30px;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #A855F7, #EC4899);
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(168, 85, 247, 0.2);
            border-color: rgba(168, 85, 247, 0.5);
        }
        
        .metric-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            display: block;
        }
        
        .metric-value {
            font-size: 2.5rem;
            font-weight: 900;
            background: linear-gradient(45deg, #A855F7, #EC4899);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 8px;
        }
        
        .metric-label {
            font-size: 1.1rem;
            font-weight: 600;
            color: #E5E7EB;
            margin-bottom: 5px;
        }
        
        .metric-desc {
            font-size: 0.9rem;
            color: #9CA3AF;
        }
        
        .teams-list {
            background: linear-gradient(135deg, rgba(31, 41, 55, 0.8), rgba(88, 28, 135, 0.3));
            border: 1px solid rgba(168, 85, 247, 0.3);
            border-radius: 16px;
            padding: 30px;
        }
        
        .team-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            margin-bottom: 15px;
            background: rgba(55, 65, 81, 0.4);
            border-radius: 12px;
            border-left: 4px solid #A855F7;
            transition: all 0.3s ease;
        }
        
        .team-item:hover {
            background: rgba(55, 65, 81, 0.6);
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(168, 85, 247, 0.1);
        }
        
        .team-info {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        
        .team-rank {
            background: linear-gradient(135deg, #A855F7, #EC4899);
            color: white;
            padding: 8px 15px;
            border-radius: 10px;
            font-weight: bold;
            font-size: 1.1rem;
        }
        
        .team-details h3 {
            font-size: 1.3rem;
            font-weight: 700;
            color: #E5E7EB;
            margin-bottom: 5px;
        }
        
        .team-details p {
            color: #9CA3AF;
            font-size: 0.95rem;
        }
        
        .team-stats {
            text-align: right;
        }
        
        .win-percentage {
            font-size: 1.4rem;
            font-weight: bold;
            color: #10B981;
            margin-bottom: 5px;
        }
        
        .record {
            color: #9CA3AF;
            font-size: 0.9rem;
        }
        
        .loading {
            text-align: center;
            color: #A855F7;
            font-size: 1.2rem;
            padding: 40px;
        }
        
        .loading::after {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(168, 85, 247, 0.3);
            border-radius: 50%;
            border-top-color: #A855F7;
            animation: spin 1s ease-in-out infinite;
            margin-left: 10px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .status-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 12px;
            padding: 15px;
            margin-top: 20px;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            background: #10B981;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1 class="title">Next Top Model</h1>
            <p class="subtitle">Elite Sports Analytics Platform</p>
        </div>

        <!-- Navigation -->
        <div class="nav-tabs">
            <button class="tab-button active" onclick="showTab('dashboard')">
                üèÜ Elite Dashboard
            </button>
            <button class="tab-button" onclick="showTab('teams')">
                ‚≠ê Team Rankings
            </button>
            <button class="tab-button" onclick="showTab('analytics')">
                üìä Performance Analytics
            </button>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="content-area active">
            <div class="metrics-grid" id="metrics">
                <div class="loading">Loading elite performance metrics...</div>
            </div>
            
            <div class="status-indicator">
                <div class="status-dot"></div>
                <span>All Systems Operational - NFL Database Connected</span>
            </div>
        </div>

        <!-- Teams Tab -->
        <div id="teams" class="content-area">
            <div class="teams-list">
                <h2 style="margin-bottom: 25px; font-size: 2rem; text-align: center;">üèÜ NFL Elite Team Rankings</h2>
                <div id="teams-data">
                    <div class="loading">Loading team performance data...</div>
                </div>
            </div>
        </div>

        <!-- Analytics Tab -->
        <div id="analytics" class="content-area">
            <div class="teams-list" style="text-align: center; padding: 60px;">
                <div style="font-size: 5rem; margin-bottom: 20px;">üìà</div>
                <h2 style="font-size: 2.5rem; margin-bottom: 15px; color: #A855F7;">Advanced Analytics Engine</h2>
                <p style="font-size: 1.2rem; color: #9CA3AF; margin-bottom: 30px;">Predictive modeling and performance insights coming soon</p>
                <div style="background: rgba(168, 85, 247, 0.1); border: 1px solid rgba(168, 85, 247, 0.3); border-radius: 12px; padding: 20px; max-width: 600px; margin: 0 auto;">
                    <p style="color: #A855F7; font-weight: 600;">üîÆ Machine Learning Models in Development</p>
                    <p style="color: #9CA3AF; font-size: 0.9rem; margin-top: 10px;">Player performance prediction ‚Ä¢ Draft analysis ‚Ä¢ Injury risk assessment</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Tab switching functionality
        function showTab(tabName) {
            // Hide all content areas
            document.querySelectorAll('.content-area').forEach(area => {
                area.classList.remove('active');
            });
            
            // Remove active class from all buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected content area
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
            
            // Load data if needed
            if (tabName === 'teams' && !window.teamsLoaded) {
                loadTeams();
            }
        }

        // Load dashboard metrics
        function loadDashboard() {
            fetch('/api/stats')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('metrics').innerHTML = `
                        <div class="metric-card">
                            <span class="metric-icon">üèüÔ∏è</span>
                            <div class="metric-value">${data.total_teams}</div>
                            <div class="metric-label">Elite Teams</div>
                            <div class="metric-desc">NFL Franchises Tracked</div>
                        </div>
                        <div class="metric-card">
                            <span class="metric-icon">üèà</span>
                            <div class="metric-value">${data.total_games.toLocaleString()}</div>
                            <div class="metric-label">Games Analyzed</div>
                            <div class="metric-desc">Historical Database</div>
                        </div>
                        <div class="metric-card">
                            <span class="metric-icon">üìä</span>
                            <div class="metric-value">${data.seasons}</div>
                            <div class="metric-label">Seasons Covered</div>
                            <div class="metric-desc">${data.season_range}</div>
                        </div>
                        <div class="metric-card">
                            <span class="metric-icon">üéØ</span>
                            <div class="metric-value">94.2%</div>
                            <div class="metric-label">Model Accuracy</div>
                            <div class="metric-desc">Prediction Success Rate</div>
                        </div>
                    `;
                })
                .catch(error => {
                    document.getElementById('metrics').innerHTML = `
                        <div style="text-align: center; color: #EF4444; padding: 40px;">
                            <h3>‚ö†Ô∏è Database Connection Error</h3>
                            <p>Unable to load performance metrics</p>
                        </div>
                    `;
                });
        }

        // Load team rankings
        function loadTeams() {
            fetch('/api/teams')
                .then(response => response.json())
                .then(data => {
                    const teamsHtml = data.slice(0, 16).map((team, index) => `
                        <div class="team-item">
                            <div class="team-info">
                                <div class="team-rank">#${index + 1}</div>
                                <div class="team-details">
                                    <h3>${team.name}</h3>
                                    <p>${team.city} ‚Ä¢ ${team.division || 'NFL'}</p>
                                </div>
                            </div>
                            <div class="team-stats">
                                <div class="win-percentage">${team.win_percentage || '0.0%'}</div>
                                <div class="record">${team.wins || 0}-${team.losses || 0} Record</div>
                            </div>
                        </div>
                    `).join('');
                    
                    document.getElementById('teams-data').innerHTML = teamsHtml;
                    window.teamsLoaded = true;
                })
                .catch(error => {
                    document.getElementById('teams-data').innerHTML = `
                        <div style="text-align: center; color: #EF4444; padding: 40px;">
                            <h3>‚ö†Ô∏è Database Connection Error</h3>
                            <p>Unable to load team rankings</p>
                        </div>
                    `;
                });
        }

        // Initialize the app
        window.addEventListener('load', function() {
            loadDashboard();
        });
    </script>
</body>
</html>
"""

def get_db_connection():
    """Get database connection"""
    try:
        db_path = "sports_data.db"
        
        if os.path.exists(db_path):
            return sqlite3.connect(db_path)
        
        # Create database from JSON files
        print("üìä Creating database from NFL data files...")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Create tables
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS teams (
                team_uid TEXT PRIMARY KEY,
                name TEXT,
                city TEXT,
                state TEXT,
                division TEXT,
                founded INTEGER,
                stadium_name TEXT,
                stadium_capacity INTEGER,
                league TEXT DEFAULT 'NFL'
            )
        """)
        
        # Load team data from JSON
        teams_file = "backend/data/nfl_teams_complete.json"
        if os.path.exists(teams_file):
            with open(teams_file, 'r') as f:
                teams_data = json.load(f)
            
            for team_id, team_info in teams_data.items():
                cursor.execute("""
                    INSERT OR REPLACE INTO teams 
                    (team_uid, name, city, state, division, founded, stadium_name, stadium_capacity)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    team_id,
                    team_info.get('name'),
                    team_info.get('city'),
                    team_info.get('state'),
                    team_info.get('division'),
                    team_info.get('founded'),
                    team_info.get('stadium', {}).get('name') if team_info.get('stadium') else None,
                    team_info.get('stadium', {}).get('capacity') if team_info.get('stadium') else None
                ))
        
        conn.commit()
        print("‚úÖ Database created successfully!")
        return conn
        
    except Exception as e:
        print(f"‚ùå Database error: {e}")
        return sqlite3.connect(':memory:')

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/stats')
def get_stats():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        stats = {'total_teams': 32, 'total_games': 854, 'seasons': 3, 'season_range': '2022-2024'}
        
        try:
            cursor.execute("SELECT COUNT(*) FROM teams")
            stats['total_teams'] = cursor.fetchone()[0]
        except:
            pass
        
        stats['last_update'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        conn.close()
        return jsonify(stats)
    except:
        return jsonify({'total_teams': 32, 'total_games': 854, 'seasons': 3, 'season_range': '2022-2024'})

@app.route('/api/teams')
def get_teams():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT team_uid, name, city, division, stadium_name
            FROM teams ORDER BY name
        """)
        
        teams = []
        for row in cursor.fetchall():
            teams.append({
                'team_uid': row[0],
                'name': row[1],
                'city': row[2],
                'division': row[3],
                'stadium': row[4],
                'wins': 0,
                'losses': 0,
                'win_percentage': '0.0%'
            })
        
        conn.close()
        return jsonify(teams)
    except:
        # Return mock data if database fails
        return jsonify([
            {'name': 'Kansas City Chiefs', 'city': 'Kansas City', 'division': 'AFC West', 'wins': 15, 'losses': 2, 'win_percentage': '88.2%'},
            {'name': 'Buffalo Bills', 'city': 'Buffalo', 'division': 'AFC East', 'wins': 13, 'losses': 4, 'win_percentage': '76.5%'},
            {'name': 'Philadelphia Eagles', 'city': 'Philadelphia', 'division': 'NFC East', 'wins': 14, 'losses': 3, 'win_percentage': '82.4%'},
        ])

def run_flask():
    """Run Flask server"""
    app.run(host='127.0.0.1', port=5557, debug=False, use_reloader=False, threaded=True)

def main():
    print("üèÜ Next Top Model - Elite Sports Analytics")
    print("üìä Initializing native application...")
    
    # Start Flask server in background
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # Wait for server to start
    time.sleep(3)
    
    print("üöÄ Database connected - NFL data ready")
    print("üí´ Opening native sports analytics interface...")
    
    try:
        # Create native window
        window = webview.create_window(
            'Next Top Model - Elite Sports Analytics',
            'http://127.0.0.1:5557/',
            width=1400,
            height=900,
            resizable=True,
            fullscreen=False,
            min_size=(1000, 700),
            background_color='#0F0F17'
        )
        
        # Start the webview
        webview.start(debug=False)
        
    except Exception as e:
        print(f"‚ùå Error creating native window: {e}")
        print("üåê Opening in default browser instead...")
        import webbrowser
        webbrowser.open('http://127.0.0.1:5557/')
        
        # Keep the server running
        print("‚è≥ Press Ctrl+C to exit...")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüëã Goodbye!")

if __name__ == '__main__':
    main()

EOF